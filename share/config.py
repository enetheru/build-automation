import os.path
import platform
import sys
from pathlib import Path
from types import SimpleNamespace

gopts = SimpleNamespace(**{
    'command'       :" ".join( sys.argv ),      # The command used to run the tool
    'platform'      :platform.system(),         # The host platform
    'path'          :Path(os.getcwd()),         # The working path
    'modules'       :{},                        # The module files for projects
    'toolchains'    :dict[str,SimpleNamespace](),   # The list of toolchains available on the host machine
    'buildtools'    :dict[str,SimpleNamespace](),   # The list of buildtools available on the host machine
    'projects'      :dict[str,SimpleNamespace](),   # The list of projects generated by imported from modules
    'sources'       :dict[str,SimpleNamespace](),   # Override sources defined on the command line,
    'srcdef'        :SimpleNamespace(),
    'skipkeys'      :[  # A list of keys that are skipped when writing out configuration to build scripts.
        'modules',
        'toolchains',
        'buildtools',
        'projects'
    ],
    'toolchain_actions' :list[str](),
    'project_actions'   :list[str](),
    'build_actions'     :list[str](),
    'toolchain_verbs'   :list[str](),
    'project_verbs'     :list[str](),
    'build_verbs'       :list[str]()
})
# MARK: Toolchain
toolchain_base = SimpleNamespace(**{
    'name'          :str(),         # The name of the toolchain.
    'verbs'         :list[str](),   # keywords presented on the command line that can be used to trigger a functions
    'desc'          :str(),         # Description of the toolchain
    'shell'         :list[str](),   # shell command eg. [ "bash", "-c", """ "echo \"shell and script to pass to shell, can be a little awkward to write due to escaping\"" """ ],
    'archs'         :list[str](),   # List of target architectures eg. ['x86_64', 'arm64'],
    'platforms'     :list[str](),   # List of target platforms that match values from sys.platform
    'skipkeys'      :[              # A list of keys that are skipped when writing out configuration to build scripts.
        'platforms',
        'archs'
    ]
})

# MARK: Project
project_base = SimpleNamespace(**{
    'name'          :str(),                         # Set when generated from module as module parent folder.
    'path'          :Path(),                        #
    'verbs'         :list[str](),                   #
    'sourcedir'     :Path(),                        #
    'sources'       :list[SimpleNamespace](),       #
    'buildtools'    :list[SimpleNamespace](),       #
    'toolchains'    :list[SimpleNamespace](),       #
    'build_configs' :dict[str,SimpleNamespace](),   #
    'skipkeys'      :[                              # A list of keys that are skipped when writing out configuration to build scripts.
        'sources',
        'buildtools',
        'toolchains',
        'build_configs'
    ]
})

# MARK: Build
build_base = SimpleNamespace(**{
    'project'       :SimpleNamespace(), # Is set at project import
    'name'          :str(),
    'script_path'   :Path(),            # is set at project import: project.path / f"{build.name}.py"
    'verbs'         :list[str](),
    'script_parts'  :list(),
    'arch'          :'x86_64',
    'buildtool'     :SimpleNamespace(),
    'source_dir'    :Path(),            # project relative path to put sources
    'source_path'   :Path(),            # absolute path is set at project import
    'source_def'    :SimpleNamespace(), #
    'disabled'      :False,
    'skipkeys'      :[  # A list of keys that are skipped when writing out configuration to build scripts.
        'project',
        'toolchain',
        'buildtool',
    ]
})

# MARK: BuildTool
buildtool_base = SimpleNamespace(**{
    'name'          :'',
    'verbs'         :[],
})

# MARK: Cmake
cmake_base = SimpleNamespace({**vars(buildtool_base), **{
    'name'          :'cmake',
    'verbs'         :['configure','build','clean'],

    # 'toolchain'     :Path(), # Optional key, I rely on it being missing
    'config_type'   :'Debug',
    'config_types'  :{
        'debug'         :'Debug',
        'release'       :"Release",
        'reldeb'        :"RelWithDebInfo",
        # 'relmin'        :"MinSizeRel",
    },
    'config_vars'   :list[str](),

    'generator'     :'Ninja',
    'generators'    :{
        'msvc'          :'Visual Studio 17 2022',
        'ninja'         :'Ninja',
        'ninja-multi'   :'Ninja Multi-Config',
        'mingw'         :'MinGW Makefiles',
    },

    'build_dir'     :'build-cmake',
    'build_vars'    :list[str](),
    'targets'       :list[str](),
    'target'        :str(),
    'skipkeys'      :[  # A list of keys that are skipped when writing out configuration to build scripts.
        'config_types',
        'generators',
        'targets',
    ]
}})

# MARK: SCons
scons_base = SimpleNamespace({**vars(buildtool_base), **{
    'name'          :'scons',
    'verbs'         :['build', 'clean'],
    'build_vars'    :list[str]()
}})

# MARK: Source
source_base = SimpleNamespace(**{
    'name'          :str(),
    'type'          :str(),
    'verbs'         :list[str](),
    'url'           :str(),
})

# MARK: Git
git_base = SimpleNamespace({**vars(source_base), **{
    'type'          :'git',
    'remote'        :'origin',
    'verbs'         :['fetch'],
    'url'           :str(),
    'ref'           :'HEAD',
    'gitdir'        :'git', # relative to project path.
}})